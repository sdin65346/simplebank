// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: session.sql

package db

import (
	"context"
	"time"
)

const createSession = `-- name: CreateSession :one
INSERT INTO abc.sessions (id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at) 
VALUES (:1, :2, :3, :4, :5, :6, :7)
`

type CreateSessionParams struct {
	ID           string    `json:"id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    int       `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	var i Session

	i.ID = arg.ID
	i.Username = arg.Username
	i.RefreshToken = arg.RefreshToken
	i.UserAgent = arg.UserAgent
	i.ClientIp = arg.ClientIp
	i.IsBlocked = arg.IsBlocked
	i.ExpiresAt = arg.ExpiresAt

	_, err := q.db.ExecContext(ctx, createSession,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt)

	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, username, refresh_token, user_agent, client_ip, is_blocked, expires_at, created_at 
FROM abc.sessions
WHERE id = :1 
FETCH FIRST 1 ROW ONLY
`

func (q *Queries) GetSession(ctx context.Context, id string) (Session, error) {
	var i Session

	row := q.db.QueryRowContext(ctx, getSession, id)
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}
